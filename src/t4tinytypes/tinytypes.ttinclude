<#@ template language="C#" debug="true" hostspecific="true"
#><#@ assembly name="System.Core.dll"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Collections.Generic"
#><#@ output extension="txt"
#><#+

public Scope CreateScope()
{
    ITextTemplatingEngineHost host = this.Host;
    StringBuilder template = GenerationEnvironment;
    
    return new Scope(new Manager(host, template), Generate, Finalize);
}

public class Scope : IDisposable
{
    Manager _manager;
    Action<Manager, TypeDefinition> _generate;
    Action<Manager> _finalize;

    public Scope(Manager manager, Action<Manager, TypeDefinition> generate, Action<Manager> finalize)
    {
        _manager = manager;
        _generate = generate;
        _finalize = finalize;
    }

    public void Generate(TypeDefinition definition)
    {
        _generate(_manager, definition);
    }

    public void Dispose()
    {
        _finalize(_manager);
    }
}
    public List<string> generatedItems = new List<string>();

    private void Generate(Manager manager, TypeDefinition definition)
    {
        generatedItems.Add(definition.Name);

        var myNamespace = ResolveNamespace();

        //Could be customisable in the future
        var debugDisplay = definition.Name + " {_value}m";

        IEnumerable<string> interfaces = Enumerable.Empty<string>();

        if(definition.Equatable)
        {
            interfaces = interfaces.Union(new[]{ "IEquatable<"+definition.Name+">"});
        }
        if(definition.Comparable)
        {
            interfaces = interfaces.Union(new[]{ "IComparable<"+definition.Name+">"});
        }
        var interfaceString = BuildString(": ", interfaces.ToArray(), ", ");

        manager.StartNewFile(definition.Name+".g.cs");


#>using System;
<#+if(!string.IsNullOrWhiteSpace(debugDisplay)){#>using System.Diagnostics;
<#+ } #>

namespace <#= myNamespace #>
{
<#+if(!string.IsNullOrWhiteSpace(debugDisplay)){#>
    [DebuggerDisplay("<#=debugDisplay#>")]
<#+ } #>
    public<#+ if(definition.IsPartial) { #> partial<#+ } #> struct <#= definition.Name #><#=interfaceString#>
    {
        private readonly <#= definition.TypeName #> _value;

        <#= definition.ConstructorVisibility.ToString().ToLower() #> <#= definition.Name #>(<#= definition.TypeName #> value)
        {
<#+
        if(definition.IsPartial) {#>
            Validate(value);
<#+     }
        if(definition.DefaultValidations) { PrintTypeValidation(definition.TypeName, "value"); } #>
            _value = value;
        }
<#+
        if(definition.IsPartial) {#>
        static partial void Validate(<#= definition.TypeName #> value);
<#+     }
        if(definition.Equatable) 
        {#>
        
        public bool Equals(<#= definition.Name #> other)
        {
            return _value == other._value;
        }

        public override bool Equals(object obj)
        {
            if (obj is <#= definition.Name #>)
            {
                return Equals((<#= definition.Name #>)obj);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return _value.GetHashCode();
        }<#+ }
      
      if(definition.Comparable) 
        {#>
      
        public int CompareTo(<#= definition.Name #> other)
        {
<#+if(definition.TypeName == "string")
{#>
            return String.CompareOrdinal(_value,other._value);
<#+}
else
{ #>
            return _value.CompareTo(other._value);
<#+ } #>
        }

        public static bool operator ==(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return first.Equals(second);
        }

        public static bool operator !=(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return !(first == second);
        }

        public static bool operator <(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return first.CompareTo(second) < 0;
        }

        public static bool operator <=(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return first.CompareTo(second) <= 0;
        }

        public static bool operator >(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return first.CompareTo(second) > 0;
        }

        public static bool operator >=(<#= definition.Name #> first, <#= definition.Name #> second)
        {
            return first.CompareTo(second) >= 0;
        }

<#+ } #>    

        public override string ToString()
        {
<#+if(definition.TypeName != "int" &&
 definition.TypeName != "long" &&
 definition.TypeName != "float" &&
 definition.TypeName != "double" &&
 definition.TypeName != "decimal" &&
 definition.TypeName != "bool" &&
 definition.TypeName != "char") {#>
            if(_value == null) return null;
<#+}#>
            return _value.ToString();
        }
    }
}<#+

        manager.EndBlock();
    }

    public void Finalize(Manager manager)
    {
        manager.Process(true);
#>Value Types Generated:
<#+     foreach(var item in generatedItems) { #>
* <#= item #>
<#+     }
    }

    public string BuildString(string prefix, string[] values, string joinWith)
    {
        if (values.Length == 0)
        {
            return "";
        }
        var result = string.Join(joinWith, values);
        return prefix + result;
    }

    public TypeDefinition NewValueType(string name, string type)
    {
        return new TypeDefinition() {
            Name = name,
            TypeName = type,
            ConstructorVisibility = Visibility.Public,
            IsPartial = false,
            Equatable = true,
            DefaultValidations = false,
            Comparable = false
        };
    }

    public string String = "string";
    public string Int = "int";
    public string Long = "long";
    public string Double = "double";
    public string Float = "float";
    public string Decimal = "decimal";
    public string Bool = "bool";
    public string Char = "char";
    
    public string ResolveNamespace()
    {
        var generatedNamespace = "DefaultNamespace";
        var foundNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
        if(foundNamespace != null) {
             generatedNamespace = foundNamespace.ToString();
        }
        else
        {
            var resolvedNamespace = this.Host.ResolveParameterValue("","","NamespaceHint");
            if(resolvedNamespace != null) {
                generatedNamespace = resolvedNamespace;
            }
        }

        return generatedNamespace;
    }

    public void PrintTypeValidation(string type, string propertyName)
    {
        if(type == "double"){
#>
            if (<#= propertyName #> < 0)
            {
                throw new ArgumentOutOfRangeException(nameof(<#= propertyName #>), "must be non-negative");  // I hope this is right
            }
            if (Double.IsInfinity(<#= propertyName #>) || Double.IsNaN(<#= propertyName #>))
            {
                throw new ArgumentOutOfRangeException(nameof(<#= propertyName #>), "come on chaps, be reasonable");
            }

<#+
        }if(type == "int"){
#>
            if (<#= propertyName #> < 0)
            {
                throw new ArgumentOutOfRangeException(nameof(<#= propertyName #>), "must be non-negative");  // I hope this is right
            }

<#+
        }if(type == "string"){
#>
            if (string.IsNullOrWhiteSpace(<#= propertyName #>))
            {
                throw new ArgumentOutOfRangeException(nameof(<#= propertyName #>), "must have a value");  // I hope this is right
            }

<#+
        }
    }

    public class TypeDefinition
    {
        public string Name { get; set; }
        public string TypeName { get; set; }
        public Visibility ConstructorVisibility { get; set; }
        public bool IsPartial { get; set; }
        public bool Equatable { get; set; }
        public bool DefaultValidations { get; set; }
        public bool Comparable { get; set; }
    }

    public enum Visibility
    {
        Public,
        Private,
        Protected,
        Internal
    }



// https://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

// Manager class records the various blocks so it can split them up
public class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return new Manager(host, template);
    }

    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    public Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }
}

/* IMPORTANT: Do not add blanks after this last tag as it would break the T4 generation
 * See http://stackoverflow.com/questions/11379471/error-a-template-containing-a-class-feature-must-end-with-a-class-feature
 */
#>